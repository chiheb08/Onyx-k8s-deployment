# ============================================================================
# API Server Deployment for Onyx
# ============================================================================
# Backend FastAPI application
# Image: onyxdotapp/onyx-backend
# Port: 8080
# ============================================================================

---
apiVersion: v1
kind: Service
metadata:
  name: api-server
  labels:
    app: api-server
spec:
  type: ClusterIP
  ports:
    - name: api-server-port
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: api-server

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  labels:
    app: api-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
        scope: onyx-backend
    spec:
      # Init container to run database migrations
      initContainers:
        - name: migration
          image: onyxdotapp/onyx-backend:nightly-20241004
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              echo "Running database migrations..."
              alembic upgrade head
              echo "Migrations complete!"
          env:
            # PostgreSQL connection
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: onyx-config
                  key: POSTGRES_HOST
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: onyx-config
                  key: POSTGRES_PORT
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: onyx-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_PASSWORD
            # Redis connection (required by Alembic for coordination)
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: onyx-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: onyx-config
                  key: REDIS_PORT
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: REDIS_PASSWORD
            # NLTK data path (for air-gapped environments)
            - name: NLTK_DATA
              value: "/usr/local/share/nltk_data"
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
      containers:
        - name: api-server
          image: onyxdotapp/onyx-backend:nightly-20241004
          imagePullPolicy: IfNotPresent
          ports:
            - name: api-port
              containerPort: 8080
              protocol: TCP
          command:
            - uvicorn
            - onyx.main:app
            - --host
            - "0.0.0.0"
            - --port
            - "8080"
          envFrom:
            - configMapRef:
                name: onyx-config
          env:
            # Database credentials from secret
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_PASSWORD
            # Redis password from secret
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: REDIS_PASSWORD
            # NLTK data path (for air-gapped environments)
            - name: NLTK_DATA
              value: "/usr/local/share/nltk_data"
          resources:
            requests:
              cpu: 500m          # Reduced from Helm (1000m) for minimal
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
      restartPolicy: Always

