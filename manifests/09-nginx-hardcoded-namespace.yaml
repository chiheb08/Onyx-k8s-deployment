# ============================================================================
# NGINX Deployment for Onyx - HARDCODED NAMESPACE VERSION
# ============================================================================
# Use this version if environment variable substitution doesn't work
# Replace "YOUR_NAMESPACE" with your actual namespace name
# ============================================================================

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    upstream web_server {
        server web-server.YOUR_NAMESPACE.svc.cluster.local:3000;
    }

    upstream api_server {
        server api-server.YOUR_NAMESPACE.svc.cluster.local:8080;
    }

    server {
        listen 80;
        server_name _;

        # Increase buffer sizes for large headers
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        large_client_header_buffers 4 16k;

        # API requests
        location /api/ {
            proxy_pass http://api_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket support for API
        location /api/stream {
            proxy_pass http://api_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Disable buffering for streaming
            proxy_buffering off;
            proxy_cache off;
            
            # Long timeout for streaming
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # All other requests go to web server (Next.js)
        location / {
            proxy_pass http://web_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  type: ClusterIP  # Simple internal service (use OpenShift Route for external access)
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: nginx

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      initContainers:
        - name: wait-for-services
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "=== DEBUGGING INFORMATION ==="
              echo "Testing DNS resolution with hardcoded namespace: YOUR_NAMESPACE"
              echo "Current working directory: $(pwd)"
              echo "Available environment variables:"
              env | grep -E "(NAMESPACE|KUBERNETES)" || echo "No Kubernetes env vars found"
              echo "================================="
              
              echo "Testing DNS resolution with different formats..."
              
              echo "1. Testing short names:"
              nslookup web-server || echo "Short name failed"
              nslookup api-server || echo "Short name failed"
              
              echo "2. Testing hardcoded full DNS names:"
              nslookup web-server.YOUR_NAMESPACE.svc.cluster.local || echo "Hardcoded full DNS name failed"
              nslookup api-server.YOUR_NAMESPACE.svc.cluster.local || echo "Hardcoded full DNS name failed"
              
              echo "=== WAITING FOR SERVICES ==="
              echo "Waiting for web-server..."
              until nslookup web-server.YOUR_NAMESPACE.svc.cluster.local; do
                echo "web-server not ready, waiting... (hardcoded namespace: YOUR_NAMESPACE)"
                sleep 2
              done
              echo "web-server is ready!"
              
              echo "Waiting for api-server..."
              until nslookup api-server.YOUR_NAMESPACE.svc.cluster.local; do
                echo "api-server not ready, waiting... (hardcoded namespace: YOUR_NAMESPACE)"
                sleep 2
              done
              echo "api-server is ready!"
              
              echo "All services are ready!"
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
      containers:
        - name: nginx
          image: nginx:1.23.4-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /nginx-health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /nginx-health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
      restartPolicy: Always
